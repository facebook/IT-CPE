{
  "name": "cpe_applocker",
  "description": "Installs and configures Applocker for Windows.",
  "long_description": "cpe_applocker Cookbook\n====================\nAbout\n--------------------\nThis cookbook includes recipes and resources to install, configure, and manage\nWindows AppLocker. AppLocker is a binary application allowlisting and\nblacklisting service built natively into Windows. AppLocker allows for\nBlacklisting or allowlisting via signing certificate, binary path, and binary\nhash.\n\nSupported Platforms\n--------------------\n\n* Windows 10\n\nChef\n--------------------\n\n* Chef 14\n\nUsage\n--------------------\n* Include `cpe_applocker::default` in your node's run_list\n* Override attributes to match your desired AppLocker configuration, see the\n  table below for configuration options.\n\nRecipes\n--------------------\n\n### default\nThe `default` recipe determines if the platform can support AppLocker, and, if\nconfigured, will enable the `AppIDSvc` service and configure the applocker\nrules specified by the attributes.\n\nAttributes\n--------------------\n\nUse the following attributes to manage and configure AppLocker\n\n| name   | type | default |                   description                     |\n|--------|------|---------|---------------------------------------------------|\n| `['cpe_applocker']['enabled']` | `Boolean` | `nil` | Whether to configure AppLocker. `true` => Install and Configure, `false` => Uninstall, `nil` => Do nothing, used for GPO AD managed AppLocker hosts. |\n| `['cpe_applocker']['applocker_rules']` | `Hash` | A hash with all empty rule sets | A hash containing the AppLocker rules, see the next section for configuring rules |\n\n### AppLocker Hash rule configuration\n\n**Note** it is strongly encouraged that users of this cookbook read through the\n[MSDN technet articles](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/administer-applocker)\non managing and configuring AppLocker, and leverage the\n[Powershell Cmdlets for generating AppLocker rules](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/use-the-applocker-windows-powershell-cmdlets).\n\nThe AppLocker rules are specified by a ruby Hash, which is converted to and\nfrom an XML blob to be shipped to AppLocker via the `Nokogiri::XML` parser.\nThere are 5 total rule sets one can configured,\n[completely detailed in this MSDN article](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/working-with-applocker-rules#rule-collections).\nIn short, one can control the execution of the following types of applications\non a windows host:\n\n* Executable Files: `.exe`, `.com`\n* Scripts: `.ps1`, `.bat`, `.cmd`, `.vbs`, `.js`\n* Windows Installer Files: `.msi`, `.msp`, `.mst`\n* Packaged Apps and App installers: `.appx`\n* DLL Files: `.dll`, `.ocx`\n\nThe ruby Hash containing the rule sets has a sub-Hash for each of the\napplication types. Each subhash contains an array called `rules` which is a\nlist of Hashes, where each Hash represents an individual AppLocker rule.\n\nLet's look at a trivial example containing one of the default AppLocker rules\nfor allowing any executable to run for Administrators. The rule as it looks\nwhen pulled from the AppLocker policy is:\n\n```xml\n<AppLockerPolicy Version=\"1\">\n  <RuleCollection Type=\"Appx\" EnforcementMode=\"AuditOnly\" />\n  <RuleCollection Type=\"Dll\" EnforcementMode=\"AuditOnly\" />\n  <RuleCollection Type=\"Exe\" EnforcementMode=\"AuditOnly\">\n    <FilePathRule Id=\"fd686d83-a829-4351-8ff4-27c7de5755d2\" Name=\"(Default\n      Rule) All files\" Description=\"Allows members of the local Administrators\n      group to run all applications.\" UserOrGroupSid=\"S-1-5-32-544\"\n      Action=\"Allow\">\n      <Conditions>\n        <FilePathCondition Path=\"*\" />\n      </Conditions>\n    </FilePathRule>\n  </RuleCollection>\n  <RuleCollection Type=\"Msi\" EnforcementMode=\"AuditOnly\" />\n  <RuleCollection Type=\"Script\" EnforcementMode=\"AuditOnly\" />\n</AppLockerPolicy>\n```\n\nWe then convert this XML hash into a Ruby Hash, so it can fit nicely into our\n`applocker_rules` attribute:\n\n```ruby\n'applocker_rules' => {\n    'Appx' => {'mode' => 'AuditOnly', 'rules' => []},\n    'Dll' => {'mode' => 'AuditOnly', 'rules' => []},\n    'Exe' => {\n      'mode' => 'AuditOnly',\n      'rules' => [\n        {\n          'type' => 'path',\n          'name' => '(Default Rule) All files',\n          'id' => 'fd686d83-a829-4351-8ff4-27c7de5755d2',\n          'description' => 'Allows members of the local Administrators ' +\n            'group to run all applications.',\n          'user_or_group_sid' => 'S-1-5-32-544',\n          'action' => 'Allow',\n          'conditions' => [\n            { 'path' => '*' },\n          ],\n        },\n      ],\n    },\n    'Msi' => {'mode' => 'AuditOnly', 'rules' => []},\n    'Script' => {'mode' => 'AuditOnly', 'rules' => []},\n```\n\nWhen our cook book runs, it will render the above Ruby hash to be the same XML\nblob that AppLocker is expecting. Let's look a bit closer at the hash rule we\nhave defined above to better understand what each key/value pair should be:\n\n| Key | Value |\n|-----|-------|\n|`type` | This is the type of AppLocker rule, can be one of `path`, `certificate`, or `hash`. |\n|`name` | A descriptive name for the rule. There are no restrictions on this, but it's encouraged to use a descriptive name. |\n| `id`  | This is a GUID value to uniquely identify the rule. You can fetch a new Guid with the `New-Guid` powershell cmdlet, or use the local AppLocker rule generation flow to get a GUID for your rule. |\n| `description` | A more exhaustive description of your rule, perhaps a great place to link policy decisions for why the app is blocked. |\n| `user_or_group_sid` | The SID which identifies the user or group that this rule should apply to, for example `S-1-1-0` is the \"Everyone\" group. Can be fetched with a utility like osquery, or via WMIC with `wmic useraccount where name='username' get sid`. |\n| `action` | Whether to allow or deny the execution, must be one of `Allow` or `Deny`. |\n| `conditions` | A list of hashes specifying the particulars of this rule. For paths this is a Hash of the path values, such as `[{'path' => 'C:\\ProgramData\\*'}]`. Paths support wildcards, see [this MSDN article](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/working-with-applocker-rules) for more details on these values. |\n",
  "maintainer": "Facebook",
  "maintainer_email": "noreply@fb.com",
  "license": "Apache-2.0",
  "platforms": {

  },
  "dependencies": {
    "cpe_helpers": ">= 0.0.0"
  },
  "providing": {

  },
  "recipes": {

  },
  "version": "0.1.0",
  "source_url": "",
  "issues_url": "",
  "privacy": false,
  "chef_versions": [

  ],
  "ohai_versions": [

  ],
  "gems": [

  ],
  "eager_load_libraries": true
}
