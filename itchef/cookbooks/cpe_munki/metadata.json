{
  "name": "cpe_munki",
  "description": "Installs/Configures Munki",
  "long_description": "cpe_munki Cookbook\n==================\ncpe_munki can install and configure Munki, remediate broken installs, and manage\nlocal-only manifests.\n\nRequirements\n------------\n* macOS\n\nAttributes\n----------\n* node['cpe_munki']['auto_remediate']\n* node['cpe_munki']['configure']\n* node['cpe_munki']['install']\n* node['cpe_munki']['skip_enforcing_launchds']\n* node['cpe_munki']['local']['managed_installs']\n* node['cpe_munki']['local']['managed_uninstalls']\n* node['cpe_munki']['local']['optional_installs']\n* node['cpe_munki']['munki_version_to_install']\n* node['cpe_munki']['defaults_preferences']\n* node['cpe_munki']['preferences']\n\nUsage\n-----\nThis cookbook handles the various aspects of a Munki install. To use this\ncookbook, set the attributes according to what you want to do and the cookbook\nwill handle the rest.\n\nExamples:\n\n### Install Munki and do nothing else\n\n```\n    node.default['cpe_munki']['install']  = true\n```\n\n### Install and configure Munki\n\n```\nnode.default['cpe_munki']['install'] = true\nnode.default['cpe_munki']['configure'] = true\nnode.default['cpe_munki']['preferences']['SoftwareRepoURL'] =\n  'https://munki.MYCOMPANY.com/repo'\nnode.default['cpe_munki']['preferences']['InstallAppleSoftwareUpdates'] = true\n```\n\n### Only configure Munki\n\n```\nnode.default['cpe_munki']['configure'] = true\nnode.default['cpe_munki']['preferences']['SoftwareRepoURL'] = https://munki.MYCOMPANY.com/repo'\nnode.default['cpe_munki']['preferences']['InstallAppleSoftwareUpdates'] = true\nnode.default['cpe_munki']['preferences']['AppleSoftwareUpdatesOnly'] = true\n```\n\nAdvanced Example:\n\nNote: You must have a Munki server setup and all packages you add to this\nattribute must be available in the node's catalogs\n\n#### Add `managed_installs` using a local manifest\n\n```ruby\nmanaged_installs = [\n  'Firefox',\n  'Chrome'\n]\nmanaged_installs.each do |item|\n  node.default['cpe_munki']['local']['managed_installs'] << item\nend\n```\n\n#### Add `optional_installs` using a local manifest\n\n```ruby\noptional_installs = [\n  'Dropbox'\n]\noptional_installs.each do |item|\n  node.default['cpe_munki']['local']['optional_installs'] << item\nend\n```\n\n### Installing Munki\nThe 'cpe_munki_install' resource will install Munki. You must set the `install`\nattribute to be `true` in order to install the Munki packages:\n\n  node.default['cpe_munki']['install'] = true\n\nBy default, Munki releases from Github come as a single distribution package,\nwhich contain the separate subpackages inside. You can separate out the component\npackages with `pkgutil`:\n\n```\n/usr/sbin/pkgutil --expand munkitools-3.0.3.3333.pkg munkitools3\n```\n\nMunki will determine what packages to install by looping through all the keys in\n `node['cpe_munki']['munki_version_to_install']`.\nEach key should correspond to a hash that contains the version of the package,\nand its SHA256 checksum. To configure a client to install Munki 3 in its entirety:\n\n```ruby\n    {\n      'launchd' => {\n        'version' => '3.0.3265',\n        'checksum' =>\n        'b3871f6bb3522ce5e46520bcab06aed2644bf11265653f6114a0e34911f17914',\n      },\n      'admin' => {\n        'version' => '3.2.0.3476',\n        'checksum' =>\n          '863614a59ba8ee4cb5730ff708fbdcb9fa4c248b456802fce28303ad9e312c17',\n      },\n      'app' => {\n        'version' => '4.7.3445',\n        'checksum' =>\n          '50e946983a48a33a62c4e6115875500af1d2a46254415946f90bcc121c577816',\n      },\n      'app_usage' => {\n        'version' => '3.2.0.3476',\n        'checksum' =>\n          '62c9e2238bde906c968203e09088d4dcb4bb0e82d9c9d7683b3f8024263e79ef',\n      },\n      'core' => {\n        'version' => '3.2.0.3476',\n        'checksum' =>\n          '5319e29efb89f6c5b97c6976772da564f9c4781b802c582a895feb32678c83a8',\n      },\n    }.each do |k, v|\n      node.default['cpe_munki']['munki_version_to_install'][k] = v\n    end\n```\n\nThe `install` resource will loop through all the package names and use `cpe_remote`\nto download the package from `node['cpe_remote']['base_url']`, verify the checksum\nof the downloaded file matches, and then install it. You can override the URL on\na per-package basis if you so wish:\n\n```ruby\nnode.default['cpe_munki']['munki_version_to_install']['admin'] = {\n  'version' => '3.0.0.3333',\n  'url' => 'foo.com/path/to/munkitools_admin.pkg'\n  'checksum' => '42fb19dbaa1d24691a596a3d60e900f57d2b9d6e1a8018972fe4c52c2f988682',\n}\n```\n\n### Selectively enforcing Munki LaunchDaemons\n\nBy default, all Munki launch daemons and launch agents are loaded and enforced\nevery Chef run. If you want to stop enforcing any specific launch daemons/agents,\nyou can add the name after the prefix to the\n`node['cpe_munki']['skip_enforcing_launchds']` array.\n\nSince all Munki launch daemons/agents share the same prefix of \"com.googlecode.munki\",\nyou only need to add the last portion to this list. For example, you could use\nthis to prevent Chef from enforcing that the logout helper launch daemon is loaded:\n\n```\nnode.default['cpe_munki']['skip_enforcing_launchds'] += ['logouthelper']\n```\n\n### Munki Configuration\nThe 'cpe_munki_config' resource will install a profile that configures Munki settings.\nYou must set `node['cpe_munki']['config']` to be `true` for this to run.\n\nBy leveraging `cpe_profiles`, we can craft a profile that has the base settings\nwe want to apply. The default settings are stored in `node['cpe_munki']['preferences']`.\nThose values can be overridden in any recipe to be applied as you want:\n\n```ruby\n# Munki attribute overrides\n{\n  'DaysBetweenNotifications' => 90,\n  'InstallAppleSoftwareUpdates' => true,\n  'SoftwareRepoURL' => \"https://#{server}/repo\"\n}.each do |k, v|\n  node.default['cpe_munki']['preferences'][k] = v\nend\n```\n\nIn addition, the 'cpe_munki_defaults_config' resource will configure settings using\nthe `macos_userdefaults` resource. This is useful if you want to consistently manage\na setting with `defaults` so that other system tools besides Chef can modify it.\nYou can set these settings using `node['cpe_munki']['defaults_preferences']`:`\n\n```ruby\n# Munki attribute overrides\n{\n  'SoftwareRepoURL' => \"https://#{server}/repo\"\n}.each do |k, v|\n  node.default['cpe_munki']['defaults_preferences'][k] = v\nend\n```\n\n**NOTE:** Preferences can *only* be set under either the `preferences` or\n`defaults_preferences` key. The resources will fail if a setting exists in\nboth hashes. As such, if you had both of the above code examples somewhere\nin your code, an error would be thrown saying that 'SoftwareRepoURL' is\nconfigured twice.\n\n### Local Manifests\nThe 'cpe_munki_local' resource will implement a local-only manifest.\n\nLocal Munki is where items from the `node['cpe_munki']['local']['managed_installs']`\nand `node['cpe_munki']['local']['managed_uninstalls']` node attributes are added\nto a local manifest in the respective `managed_installs` and `managed_uninstalls`\nkeys.  This allows any individual (or group, or node, etc.) to specify an existing\noptional install as either an install or uninstall.  Adding an item to either of\nthese two attributes will combine with the existing client manifest.\n\nIf an item is removed from `managed_installs` or `managed_uninstalls` in this\nmanner, Munki will no longer forcefully manage its installation or removal.\nIf an item is added to `managed_uninstalls`, it is also removed from the\n'managed_installs' array of the SelfServeManifest if the item exists there.\n\nThe default list of items to be installed on clients is in\n`cpe_munki::managed_installs`. Anyone can override this value to add or remove\nthings that they want (or don't want).\n\nAll local manifest lists support being passed a Delayed evaluator to allow\nfor comound api interactions. For example if you want to add a package to the\nmanaged_installs list based on an api attribute you can do the following:\n\n```\nnode['cpe_munki']['local']['managed_installs'] << FB::Helpers.attempt_lazy do\n   return nil unless node['cpe_example']['install_package']\n   'example_package'\nend\n```\n\nIf node['cpe_example']['install_package'] is false, nil will be returned when\nthe array is evaluated at the runtime of this cookbook. Nil values will simply\nbe ignored when generating the local manifest.\n\n```ruby\n# How to install one App:\nnode.default['cpe_munki']['local']['managed_installs'] << 'Firefox'\n```\n\n```ruby\n# How to install a list of Apps:\n    [\n      'Firefox',\n      'GoogleChrome',\n      'Atom',\n      'Dropbox',\n    ].each do |item|\n      node.default['cpe_munki']['local']['managed_installs'] << item\n    end\n```\n\n### Auto Remediation\nThis cookbook can also attempt to remediate broken Munki installs.\n\nSet `node['cpe_munki']['auto_remediate']` to the amount of days Chef should\nallow Munki to not run before reinstalling all packages. Chef will read the\n/Library/Preferences/ManagedInstalls preferences domain to parse the\n`LastCheckDate` key. If that key is older than the number of days specified, all\npackage receipts are forgotten and Chef will reinstall the Munki packages.\n\n```\nnode.default['cpe_munki']['auto_remediate'] = 30\n```\n",
  "maintainer": "Facebook",
  "maintainer_email": "noreply@facebook.com",
  "license": "Apache-2.0",
  "platforms": {

  },
  "dependencies": {
    "cpe_remote": ">= 0.0.0",
    "cpe_helpers": ">= 0.0.0",
    "cpe_profiles": ">= 0.0.0"
  },
  "providing": {

  },
  "recipes": {

  },
  "version": "0.3.0",
  "source_url": "",
  "issues_url": "",
  "privacy": false,
  "chef_versions": [

  ],
  "ohai_versions": [

  ],
  "gems": [

  ],
  "eager_load_libraries": true
}
