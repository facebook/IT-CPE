{
  "name": "cpe_logger",
  "description": "This cookbook if for logging tools",
  "long_description": "cpe_logger Cookbook\n==================\nThis cookbook provides a central logging library that other recipes can take advantage of to provide some unified logging. All log data here is collected in /var/log/cpe/cpe_logger.log and can be collected by osquery.\n\nUsage\n-----\n\n`CPE::Log.if(msg) { method }`\nThis will log the msg if the method returns truthy, and will return the value of the method call.\n\n`CPE::Log.unless(msg) { method }`\nThis will log the msg unless the method returns falsy, and will return the value of the method call.\n\n`CPE::Log.if_else(ifmsg, elsemsg) { method }`\nThis will log the `ifmsg` if the method returns truthy, and will log the `elsemsg` if the method returns falsy.\nAdditionally it will return the value of the method call.\n\nExample usage of Log.if:\n    CPE::Log.if('This is true') { true }\n\nExample usage of Log.unless:\n    CPE::Log.unless('This is true') { false }\n\nIts highly encouraged that you also pass level, type, action, status.\n  level - Symbol, [:info, :warn, :error] default: :info\n  type - String, Name of cookbook. default: chef\n  action - String, Name of resource/resource_action. default: nil\n  status - String, [success, fail] default: nil\n\nAs well as showing the log in the chef output, these methods will produce a log\non disk at '/var/log/cpe_logger.log', which can be indexed with osquery.\n\n# Common Constructions\n\nIt's helpful to create a helper function to set up your log variables first. With this helper function, you can set up what your log output will look like before usage:\n\n    # Set up your log variables\n    def log_vars(action, status)\n      @type = 'recipe_or_resource_name'\n      @action = action\n      @status = status\n    end\n\nUsing the `log_vars` function above makes it easier to be consistent in your messaging. Here's some sample code you can copy and paste into your cookbook:\n\n    def log_vars(action, status)\n      @type = 'cpe_filevault'\n      @action = action\n      @status = status\n    end\n\n    def log_if_else(ifmsg, elsemsg)\n      CPE::Log.if_else(\n        ifmsg, elsemsg, :type => @type, :action => @action\n      ) { yield }\n    end\n\n    def log_if(msg)\n      CPE::Log.if(\n        msg, :type => @type, :action => @action, :status => @status\n      ) { yield }\n    end\n\n    def log_unless(msg)\n      CPE::Log.unless(\n        msg, :type => @type, :action => @action, :status => @status\n      ) { yield }\n    end\n\n\nNow you can use this to establish the base for your future logging:\n\n    log_vars('verify', 'fail')\n    return unless log_unless('message_if_this_fails') { check_some_test? }\n\nThe output would look like this:\n```\n[2017-12-04T10:33:16-08:00] INFO: cookbook_name; action: verify; status: fail; message_if_this_fails\n```\n",
  "maintainer": "Facebook_IT-CPE",
  "maintainer_email": "noreply@facebook.com",
  "license": "Apache-2.0",
  "platforms": {

  },
  "dependencies": {
    "cpe_helpers": ">= 0.0.0"
  },
  "providing": {

  },
  "recipes": {

  },
  "version": "0.1.0",
  "source_url": "",
  "issues_url": "",
  "privacy": false,
  "chef_versions": [

  ],
  "ohai_versions": [

  ],
  "gems": [

  ],
  "eager_load_libraries": true
}
